<section class="product-pricing">
  <h1 class="product-pricing__title">{{ product.title }}</h1>

  {% comment %}
    Get first variant, or deep linked one
  {% endcomment %}
  {% assign current_variant = product.selected_or_first_available_variant %}
  <h2 class="product-pricing__price">
    <span id="ProductPrice">{{ current_variant.price | money }}</span>
    {% if product.compare_at_price_max > product.price %}
      <s id="ComparePrice">{{ current_variant.compare_at_price | money }}</s>
    {% endif %}
    <span id="ProductStatus" class="product-pricing__status{% unless product.compare_at_price > product.price %} hide{% endunless %}">
      {{ 'products.product.on_sale' | t }}
    </span>
  </h2>
</section>

<section class="product-images">
  {% assign featured_image = current_variant.featured_image | default: product.featured_image %}
  <a href="{{ featured_image | img_url: '1024x1024' }}" id="ProductPhoto">
    <img src="{{ featured_image | img_url: 'grande' }}" data-image-id="{{ featured_image.id }}" alt="{{ featured_image.alt | escape }}" class="product-images__primary" id="ProductPhotoImg">
  </a>
  {% comment %}
    Create thumbnails if we have more than one product image
  {% endcomment %}
  {% if product.images.size > 1 %}
  <ul class="product-thumbnails" id="ProductThumbs">
  {% for image in product.images %}
    <li class="product-thumbnails__item">
      <a data-image-id="{{ image.id }}" href="{{ image.src | img_url: 'grande' }}">
        <img src="{{ image.src | img_url: 'compact' }}" alt="{{ image.alt | escape }}">
      </a>
    </li>
  {% endfor %}
  </ul>
  {% endif %}
</section>

<ul class="gallery hide">
  {% for image in product.images %}
  <li data-image-id="{{ image.id }}" class="gallery__item" data-mfp-src="{{ image | img_url: '1024x1024' }}"></li>
  {% endfor %}
</ul>

<section class="product-details">
  <div class="product-details__description rte">
    {{ product.description }}
  </div>
  <form method="post" action="/cart/add">
    {% comment %}
      Add product variants as a dropdown.
        - By default, each variant (or combination of variants) will display as its own <option>
        - To separate these into multiple steps, which we suggest, use option_selection.js (see below)

      You can leverage jQuery to add a callback on page load and each time the select element changes:
        - Include option_selection.js (as seen at the bottom of this file)
        - This allows you to use JavaScript anytime the variant dropdown changes
        - This also separates out your variant options (ie. size, color, etc.) to separate select elements

      For more information on products with multiple options, visit:
        - http://docs.shopify.com/support/your-website/themes/can-i-make-my-theme-use-products-with-multiple-options#update-product-liquid
    {% endcomment %}
    <select name="id" id="productSelect">
      {% for variant in product.variants %}
        {% if variant.available %}

          {% comment %}
            Note: if you use option_selection.js, your <select> tag will be overwritten, meaning what you have inside <option> will not reflect what you coded below.
          {% endcomment %}
          <option {% if variant == product.selected_or_first_available_variant %} selected="selected" {% endif %} data-sku="{{ variant.sku }}" value="{{ variant.id }}">{{ variant.title }} - {{ variant.price | money_with_currency }}</option>

        {% else %}
          <option disabled="disabled">
            {{ variant.title }} - {{ 'products.product.sold_out' | t }}
          </option>
        {% endif %}
      {% endfor %}
    </select>

    <button class="button" name="add" id="AddToCart" type="submit" title="{{ 'products.product.add_to_cart' | t }}">{{ 'products.product.add_to_cart' | t }}</button>
  </form>
  {% include 'share-buttons' %}
</section>

{% comment %}
  To take advantage of a callback on the select dropdown, add option_selection.js
  and customize the JS in theme.productPage as needed.

  Currently, theme.productPage does the following:
    - Hides your <select> tag from above
    - Breaks out the product variants into separate product options, if more than one exists
    - Generates a <select> tag for each product option
    - Enables/disables elements based on variant availability

  Callback notes:
    - Keep the callback available to the global scope (window.selectCallback) so that advanced
      addons can override it.
      * E.g. multiple currencies http://docs.shopify.com/manual/configuration/store-customization/currencies-and-translations/currencies/how-to-toggle-between-two-currencies
{% endcomment %}
{{ 'option_selection.js' | shopify_asset_url | script_tag }}
<script>
  var selectCallback = function(variant, selector) {
    theme.productPage({
      money_format: "{{ shop.money_format }}",
      variant: variant,
      selector: selector,
      translations: {
        on_sale: "{{ 'products.product.on_sale' | t }}",
        sold_out : "{{ 'products.product.sold_out' | t }}",
        unavailable : "{{ 'products.product.unavailable' | t }}"
      }
    });
  };

  jQuery(function($) {
    new Shopify.OptionSelectors('productSelect', {
      product: {{ product | json }},
      onVariantSelected: selectCallback,
      enableHistoryState: true
    });

    // Add label if only one product option and it isn't 'Title'. Could be 'Size'.
    {% if product.options.size == 1 and product.options.first != 'Title' %}
      $('.selector-wrapper:eq(0)').prepend('<label for="productSelect-option-0">{{ product.options.first | escape }}</label>');
    {% endif %}

    // Hide selectors if we only have 1 variant and its title contains 'Default'.
    {% if product.variants.size == 1 and product.variants.first.title contains 'Default' %}
      $('.selector-wrapper').hide();
    {% endif %}
  });

  // Pre-loading product images, to avoid a lag when a thumbnail is clicked, or
  // when a variant is selected that has a variant image.
  Shopify.Image.preload({{ product.images | json }}, 'grande');
</script>
